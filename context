
https://docs.python.org/2/library/stdtypes.html#typecontextmanager

Pythonâ€™s with statement supports the concept of a runtime context defined by a context manager. 
This is implemented using two separate methods that allow user-defined classes to define a runtime context that is entered before 
the statement body is executed and exited when the statement ends.

with ... as ...
__enter__()
__exit__(exc_type, exc_value)


>>> f = open('test.log')
>>> dir(f)
[..., '__enter__', '__exit__', ...]


class VOW(object):
    def __init__(self, text):
        self.text = text
    def __enter__(self):
        self.text = "I say: " + self.text    # add prefix
        return self                          # note: return an object
    def __exit__(self,exc_type,exc_value,traceback):
        self.text = self.text + "!"          # add suffix


with VOW("I'm fine") as myvow:
    print(myvow.text)

print(myvow.text)

logic same as below :

VAR = EXPR
VAR = VAR.__enter__()
try:
    BLOCK
finally:
    VAR.__exit__()
