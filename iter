

print type(iter([1,2,3]))                #listiterator
print type(iter((1,2,3)))                #tupleiterator
print type(iter(callable_method, 'stop_iteration_exception_tag')) #callable-iterator

help(iter):

iter(o[, sentinel])
Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. 
Without a second argument, o must be a collection object which supports the iteration protocol (the __iter__() method), 
or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0). 
If it does not support either of those protocols, TypeError is raised. If the second argument, sentinel, is given, 
then o must be a callable object. The iterator created in this case will call o with no arguments for each call to its 
next() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be 
returned.

One useful application of the second form of iter() is to read lines of a file until a certain line is reached. 
The following example reads a file until the readline() method returns an empty string:

with open('mydata.txt') as fp:
    for line in iter(fp.readline, ''):
        process_line(line)
        
